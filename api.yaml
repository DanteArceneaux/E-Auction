swagger: "2.0"
info:
  version: "1.0.0"
  title: "E-Auction API"
  description: "E-Auction Application is microservice based Cloud Native Application. The Main purpose of E-Auction is to provide the ability to initiate sale, purchase and bid for a product by the customer. The core modules of E-Auction app are: Put a new product on auction with starting bid price.Bid for the product. Update the bid price. Enlisting of bids placed on any product."
  contact:
    name: "Dante Arceneaux"
    email: "dantearcene@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:5000"
basePath: "/e-auction/api/v1/"
schemes: 
  - "http"
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /products:
    get:
      summary: "Get all products"
      description: "Returns all products from the system that the user has access to"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
            example: 
              - id: 1
                buyer: "2345234235463256"
                product: "9845943859834598"
                firstName: "Dante"
                lastName: "Arceneaux"
                email: "dante@gmail.com"
                bidAMount: 100
                createdAt: "2020-01-01 00:00:00"
                __v: 0  
        400:
          description: "returns bad request."
        500:
          description: "returns internal server error."
  /users:
    get:
      summary: "Get all users"
      description: "Returns all users"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
            example: 
              - id: 1
                role: "buyer"
                firstName: "Dante"
                lastName: "Arceneaux"
                city: "New Orleans"
                state: "LA"
                phone: "5045555555"
                email: "dante@gmail.com"
                bidAMount: 100
                createdAt: "2020-01-01 00:00:00"
                __v: 0  

  /bids:
    get:
      summary: "Get all bids"
      description: "Returns all bids"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
            example: 
              - id: 1
                buyer: "2345234235463256"
                product: "9845943859834598"
                firstName: "Dante"
                lastName: "Arceneaux"
                city: "New Orleans"
                state: "LA"
                phone: "5045555555"
                email: "dante@gmail.com"
                bidAMount: 100
                createdAt: "2020-01-01 00:00:00"
                __v: 0

  #  get user by id
  /users/{id}:
    get:
      summary: "Get user by id"
      description: "Returns user by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  #  get product by id
  /products/{id}:
    get:
      summary: "Get product by id"
      description: "Returns product by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
  #  get bid by product name
  /bids/productName/{productName}:
    get:
      summary: "Get bid by product name"
      description: "Returns bid by product name"
      parameters:
        - name: "name"
          in: "path"
          description: "Name of product to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
  # get bids by email 
  /bids/email/{email}:
    get:
      summary: "Get bid by email"
      description: "Returns bid by email"
      parameters:
        - name: "email"
          in: "path"
          description: "Email of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # post new user
  /users/add-user: 
    post:
      summary: Posting a new user
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Posting a new user. Role MUST be buyer or seller"
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              role:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              city:
                type: string
              state:
                type: string
              phone:
                type: integer
              email:
                type: string
        
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
  # Add new product

  /products/add-product: 
    post:
      summary: Posting a new product
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Posting a new product"
      parameters:
        - in: body
          name: product
          schema:
            type: object
            properties:
              productName:
                type: string
              shortDescription:
                type: string
              detailedDescription:
                type: string
              startingPrice:
                type: integer
              bidEndDate:
                type: string
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # Add new bid 
  /bids/add-bid: 
    post:
      summary: Posting a new bid
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Posting a new bid"
      parameters:
        - in: body
          name: bid
          schema:
            type: object
            properties:
              buyer:
                type: string
              product:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              address:
                type: string
              city:
                type: string
              state:
                type: string
              pin: 
                type: integer
              phone:
                type: integer
              email:
                type: string
              bidAmount:
                type: integer
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
      
      # update bids by email 
        
  /bids/update/{email}:
    put:
      summary: "Update bid by email"
      description: "Update bid by email"
      parameters:
        - name: "email"
          in: "path"
          description: "Email of user to return"
          required: true
          schema:
            type: "application/json"
            properties:
              buyer:
                type: string
              product:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              address:
                type: string
              city:
                type: string
              state:
                type: string
              phone:
                type: integer
              email:
                type: string
              bidAmount:
                type: integer
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # update product by id
  /products/update/{id}:
    put:
      summary: "Update product by id"
      description: "Update product by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          schema:
            type: "application/json"
            properties:
              productName:
                type: string
              shortDescription:
                type: string
              detailedDescription:
                type: string
              startingPrice:
                type: integer
              bidEndDate:
                type: string
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

# Delete Product By Id
  /products/delete/{id}:
    delete:
      summary: "Delete product by id"
      description: "Delete product by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

# Delete Bid By Email
  /bids/delete/{email}:
    delete:
      summary: "Delete bid by email"
      description: "Delete bid by email"
      parameters:
        - name: "email"
          in: "path"
          description: "Email of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

# Delete User By Id
  /users/delete/{id}:
    delete:
      summary: "Delete user by id"
      description: "Delete user by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

     

   

