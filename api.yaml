swagger: "2.0"
info:
  version: "1.0.0"
  title: "E-Auction API"
  description: "E-Auction Application is microservice based Cloud Native Application. The Main purpose of E-Auction is to provide the ability to initiate sale, purchase and bid for a product by the customer. The core modules of E-Auction app are: Put a new product on auction with starting bid price.Bid for the product. Update the bid price. Enlisting of bids placed on any product."
  contact:
    name: "Dante Arceneaux"
    email: "dantearcene@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:5000"
basePath: "/e-auction/api/v1/"
schemes: 
  - "http"
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /products:
    get:
      summary: "Get all products"
      tags:
        - "products"
      description: "Returns all products from the system that the user has access to"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
            example: 
              - id: 1
                buyer: "2345234235463256"
                product: "9845943859834598"
                firstName: "Dante"
                lastName: "Arceneaux"
                email: "dante@gmail.com"
                bidAMount: 100
                createdAt: "2020-01-01 00:00:00"
                __v: 0  
        400:
          description: "returns bad request."
        500:
          description: "returns internal server error."
  /users:
    get:
      summary: "Get all users"
      tags:
        - "users"
      description: "Returns all users"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
            example: 
              - id: 1
                role: "buyer"
                firstName: "Dante"
                lastName: "Arceneaux"
                city: "New Orleans"
                state: "LA"
                phone: "5045555555"
                email: "dante@gmail.com"
                bidAMount: 100
                createdAt: "2020-01-01 00:00:00"
                __v: 0  

  /bids:
    get:
      summary: "Get all bids"
      tags:
        - "bids"
      description: "Returns all bids"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
            example: 
              - id: 1
                buyer: "2345234235463256"
                product: "9845943859834598"
                firstName: "Dante"
                lastName: "Arceneaux"
                city: "New Orleans"
                state: "LA"
                phone: "5045555555"
                email: "dante@gmail.com"
                bidAMount: 100
                createdAt: "2020-01-01 00:00:00"
                __v: 0

  #  get user by id
  /users/{id}:
    get:
      summary: "Get user by id"
      tags:
        - "users"
      description: "Returns user by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  #  get product by id
  /products/{id}:
    get:
      summary: "Get product by id"
      tags:
        - "products"
      description: "Returns product by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
  #  get product by product name
  /products/productName/{productName}:
    get:
      summary: "Get product by product name"
      tags:
        - "products"
      description: "Returns product by product name"
      parameters:
        - name: "productName"
          in: "path"
          description: "Product name of product to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # get bids by email 
  /bids/email/{email}:
    get:
      summary: "Get bid by email"
      tags:
        - "bids"
      description: "Returns bid by email"
      parameters:
        - name: "email"
          in: "path"
          description: "Email of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # post new user
  /users/add-user: 
    post:
      summary: Posting a new user
      tags:
        - "users"
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Posting a new user. Role MUST be buyer or seller. \nValidations: Product Name is not null, min 5 and max 30 characters. \nfirstName is not null, min 5 and max 30 characters. \n lastName is not null, min 3 and max 25 characters. \n email is not null, and it should be valid email pattern, containing a single @. \n mobile is not null, min 10 and max 10 character and all must be numeric."
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              role:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              city:
                type: string
              state:
                type: string
              phone:
                type: integer
              email:
                type: string
        
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
  # Add new product

  /products/add-product: 
    post:
      summary: Add a new product.  Constraints: Must be a seller, product name must be unique, bid end date must be in the future
      tags:
        - "products"
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Constraints: Product Category should be the one from the existing. (Predefined Hard Coded 'Painting Sculptor Ornament'). \n Starting price should be number Bid end date should be future date, else throw a custom exception in such case. \n  Constraints: Must be a seller, product name must be unique, bid end date must be in the future\n\nValidations: Product Name is not null, min 5 and max 30 characters. \nfirstName is not null, min 5 and max 30 characters. \n lastName is not null, min 3 and max 25 characters. \n email is not null, and it should be valid email pattern, containing a single @. \n mobile is not null, min 10 and max 10 character and all must be numeric."

      parameters:
        - in: body
          name: product
          schema:
            type: object
            properties:
              productName:
                type: string
              shortDescription:
                type: string
              detailedDescription:
                type: string
              startingPrice:
                type: integer
              bidEndDate:
                type: string
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # Add new bid 
  /bids/add-bid: 
    post:
      summary: Add a new bid.  Constraints: Must be a buyer, bid amount must be greater than starting price, bid end date must be in the future
      tags:
        - "bids"
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Posting a new bid. \n Constraints: Must be a buyer, bid amount must be greater than starting price, bid end date must be in the future\n\nValidations: Product Name is not null, min 5 and max 30 characters. \nfirstName is not null, min 5 and max 30 characters. \n lastName is not null, min 3 and max 25 characters. \n email is not null, and it should be valid email pattern, containing a single @. \n mobile is not null, min 10 and max 10 character and all must be numeric."
      parameters:
        - in: body
          name: bid
          schema:
            type: object
            properties:
              buyer:
                type: string
              product:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              address:
                type: string
              city:
                type: string
              state:
                type: string
              pin: 
                type: integer
              phone:
                type: integer
              email:
                type: string
              bidAmount:
                type: integer
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"
      
      # update bids by email 
        
  /bids/update/{email}:
    put:
      summary: "Update bid by email"
      tags:
        - "bids"
      produces: 
        - application/json
      consumes: 
        - application/json
      description: "Update bid by email"
      parameters:
        - name: "email"
          in: "path"
        - name: "bid"
          in: "body"
          description: "Email of user to return"
          schema:
            type: "application/json"
            properties:
              
              bidAmount:
                type: integer
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

  # update product by id
  /products/update/{id}:
    put:
      summary: "Update product by id"
      tags:
        - "products"
      description: "Update product by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          schema:
            type: "application/json"
            properties:
              productName:
                type: string
              shortDescription:
                type: string
              detailedDescription:
                type: string
              startingPrice:
                type: integer
              bidEndDate:
                type: string
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

# Delete Product By Id
  /products/delete/{id}:
    delete:
      summary: Delete product by id. Constraints: Must be a seller
      tags:
        - "products"
      description: "Only sellers can delete products. If the product is past the bid end date, it will throw an exception. If the product has bids, it will throw an exception and cannot be deleted."
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

# Delete Bid By Email
  /bids/delete/{email}:
    delete:
      summary: "Delete bid by email"
      tags:
        - "bids"
      description: "Delete bid by email. Constraints: Must be a buyer"
      parameters:
        - name: "email"
          in: "path"
          description: "Email of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

# Delete User By Id
  /users/delete/{id}:
    delete:
      summary: "Delete user by id"
      tags:
        - "users"
      description: "Delete user by id"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "string"
      responses:
        200:
          description: "returns success."
          schema:
            type: "application/json"

     

   

